---
import type { CollectionEntry } from 'astro:content';
import BaseLayout from './BaseLayout.astro';
import GlassCard from '../components/GlassCard.astro';
import Button from '../components/Button.astro';
import { calculateReadingTime, generateSEOTitle, generateSEODescription } from '../content/config';

export interface Props {
  post: CollectionEntry<'hanhtrinh'> | CollectionEntry<'thuchanh'>;
  relatedPosts?: Array<CollectionEntry<'hanhtrinh'> | CollectionEntry<'thuchanh'>>;
}

const { post, relatedPosts = [] } = Astro.props;
const { title, description, pubDate, author, image, tags, readingTime } = post.data;
const { Content, headings } = await post.render();

// Calculate reading time if not provided
const estimatedReadingTime = readingTime || calculateReadingTime(post.body);

// Format date
const formatDate = (date: Date) => {
  return date.toLocaleDateString('vi-VN', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

// SEO optimization
const seoTitle = generateSEOTitle(title);
const seoDescription = generateSEODescription(description);
const canonicalURL = new URL(Astro.url.pathname, Astro.site);

// Default image
const defaultImage = {
  url: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&q=80',
  alt: 'Hình ảnh thiên nhiên Việt Nam'
};

const postImage = image || defaultImage;

// Generate table of contents
const toc = headings.filter(heading => heading.depth <= 3);
---

<BaseLayout 
  title={seoTitle}
  description={seoDescription}
  image={postImage.url}
  canonicalURL={canonicalURL}
  type="article"
>
  <Fragment slot="header">
    <slot name="header" />
  </Fragment>

  <!-- Article Schema -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    "headline": title,
    "description": description,
    "image": postImage.url,
    "author": {
      "@type": "Person",
      "name": author
    },
    "publisher": {
      "@type": "Organization",
      "name": "Bộ Hành Tỉnh Thức",
      "logo": {
        "@type": "ImageObject",
        "url": `${Astro.site}/assets/logo.svg`
      }
    },
    "datePublished": pubDate.toISOString(),
    "dateModified": post.data.updatedDate?.toISOString() || pubDate.toISOString(),
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": canonicalURL
    },
    "keywords": tags.join(', '),
    "wordCount": post.body.split(/\s+/).length,
    "timeRequired": `PT${estimatedReadingTime}M`,
    "inLanguage": "vi-VN"
  })} />

  <div class="min-h-screen py-8 lg:py-12">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      
      <!-- Breadcrumb Navigation -->
      <nav class="mb-8" aria-label="Breadcrumb">
        <ol class="flex items-center space-x-2 text-sm text-text-secondary">
          <li>
            <a href="/" class="hover:text-accent-color transition-colors">
              Trang chủ
            </a>
          </li>
          <li>
            <svg class="w-4 h-4 mx-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
            </svg>
          </li>
          <li>
            <a 
              href={post.collection === 'hanhtrinh' ? '/hanhtrinh' : '/thuchanh'} 
              class="hover:text-accent-color transition-colors"
            >
              {post.collection === 'hanhtrinh' ? 'Hành trình' : 'Thực hành'}
            </a>
          </li>
          <li>
            <svg class="w-4 h-4 mx-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
            </svg>
          </li>
          <li class="text-text-primary font-medium" aria-current="page">
            {title}
          </li>
        </ol>
      </nav>

      <!-- Article Header -->
      <header class="mb-12">
        <GlassCard padding="xl" class="text-center">
          
          <!-- Tags -->
          {tags.length > 0 && (
            <div class="flex flex-wrap justify-center gap-2 mb-6">
              {tags.map((tag) => (
                <span class="px-3 py-1 text-sm font-medium text-accent-color bg-accent-color/10 rounded-full border border-accent-color/20">
                  #{tag}
                </span>
              ))}
            </div>
          )}

          <!-- Title -->
          <h1 class="text-3xl md:text-4xl lg:text-5xl font-bold text-text-primary mb-6 leading-tight">
            {title}
          </h1>

          <!-- Description -->
          <p class="text-xl text-text-secondary mb-8 max-w-3xl mx-auto leading-relaxed">
            {description}
          </p>

          <!-- Meta Information -->
          <div class="flex flex-col sm:flex-row items-center justify-center space-y-4 sm:space-y-0 sm:space-x-8 text-text-secondary">
            <div class="flex items-center space-x-2">
              <div class="w-8 h-8 bg-accent-color/20 rounded-full flex items-center justify-center">
                <svg class="w-4 h-4 text-accent-color" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                </svg>
              </div>
              <span class="font-medium">{author}</span>
            </div>

            <div class="flex items-center space-x-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <time datetime={pubDate.toISOString()}>
                {formatDate(pubDate)}
              </time>
            </div>

            <div class="flex items-center space-x-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span>{estimatedReadingTime} phút đọc</span>
            </div>
          </div>
        </GlassCard>
      </header>

      <!-- Hero Image -->
      {postImage && (
        <div class="mb-12">
          <GlassCard padding="none" class="overflow-hidden">
            <div class="aspect-[16/9] relative">
              <img
                src={postImage.url}
                alt={postImage.alt}
                class="w-full h-full object-cover"
                loading="eager"
              />
              <div class="absolute inset-0 bg-gradient-to-t from-gray-900/20 to-transparent"></div>
            </div>
          </GlassCard>
        </div>
      )}

      <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
        
        <!-- Table of Contents (Desktop) -->
        {toc.length > 0 && (
          <aside class="hidden lg:block lg:col-span-1">
            <div class="sticky top-24">
              <GlassCard padding="lg">
                <h2 class="text-lg font-semibold text-text-primary mb-4">Mục lục</h2>
                <nav aria-label="Mục lục bài viết">
                  <ul class="space-y-2">
                    {toc.map((heading) => (
                      <li>
                        <a
                          href={`#${heading.slug}`}
                          class={`block text-sm hover:text-accent-color transition-colors ${
                            heading.depth === 1 ? 'font-medium text-text-primary' :
                            heading.depth === 2 ? 'text-text-secondary pl-4' :
                            'text-text-secondary pl-8'
                          }`}
                        >
                          {heading.text}
                        </a>
                      </li>
                    ))}
                  </ul>
                </nav>
              </GlassCard>
            </div>
          </aside>
        )}

        <!-- Main Content -->
        <article class="lg:col-span-3">
          <GlassCard padding="xl" class="prose-glass">
            <Content />
          </GlassCard>

          <!-- Article Actions -->
          <div class="mt-8">
            <GlassCard padding="lg">
              <div class="flex flex-col sm:flex-row items-center justify-between space-y-4 sm:space-y-0">
                <div class="flex items-center space-x-4">
                  <Button
                    variant="glass"
                    size="md"
                    icon="heart"
                    class="hover:text-red-400"
                    ariaLabel="Thích bài viết"
                  >
                    Thích
                  </Button>
                  <Button
                    variant="glass"
                    size="md"
                    icon="share"
                    ariaLabel="Chia sẻ bài viết"
                  >
                    Chia sẻ
                  </Button>
                </div>
                
                <div class="flex items-center space-x-4">
                  <Button
                    variant="outline"
                    size="md"
                    href={post.collection === 'hanhtrinh' ? '/hanhtrinh' : '/thuchanh'}
                    icon="arrow"
                    iconPosition="left"
                  >
                    Quay lại
                  </Button>
                </div>
              </div>
            </GlassCard>
          </div>

          <!-- Author Bio -->
          <div class="mt-8">
            <GlassCard padding="lg">
              <div class="flex items-start space-x-4">
                <div class="w-16 h-16 bg-accent-color/20 rounded-full flex items-center justify-center flex-shrink-0">
                  <svg class="w-8 h-8 text-accent-color" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                  </svg>
                </div>
                <div class="flex-1">
                  <h3 class="text-lg font-semibold text-text-primary mb-2">{author}</h3>
                  <p class="text-text-secondary leading-relaxed">
                    Người thực hành bộ hành tỉnh thức, ghi lại những trải nghiệm từ hành trình đi bộ xuyên Việt Nam. 
                    Tin rằng mỗi bước chân là một cơ hội để tìm về sự bình an và tỉnh thức trong cuộc sống.
                  </p>
                </div>
              </div>
            </GlassCard>
          </div>
        </article>
      </div>

      <!-- Related Posts -->
      {relatedPosts.length > 0 && (
        <section class="mt-16">
          <div class="text-center mb-12">
            <h2 class="text-2xl md:text-3xl font-bold text-text-primary mb-4">
              Bài viết liên quan
            </h2>
            <p class="text-text-secondary">
              Khám phá thêm những chia sẻ khác từ hành trình
            </p>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {relatedPosts.slice(0, 3).map((relatedPost) => (
              <div class="animate-in animate-delay-100">
                <!-- PostCard component would be imported and used here -->
                <GlassCard variant="hover" class="h-full">
                  <div class="p-6">
                    <h3 class="text-lg font-semibold text-text-primary mb-2 line-clamp-2">
                      <a href={`/${relatedPost.collection}/${relatedPost.slug}`} class="hover:text-accent-color transition-colors">
                        {relatedPost.data.title}
                      </a>
                    </h3>
                    <p class="text-text-secondary text-sm line-clamp-3">
                      {relatedPost.data.description}
                    </p>
                  </div>
                </GlassCard>
              </div>
            ))}
          </div>
        </section>
      )}
    </div>
  </div>

  <Fragment slot="footer">
    <slot name="footer" />
  </Fragment>
</BaseLayout>

<style>
  /* Custom prose styles for article content */
  .prose-glass {
    @apply prose prose-lg prose-invert max-w-none;
  }

  .prose-glass :global(h1),
  .prose-glass :global(h2),
  .prose-glass :global(h3),
  .prose-glass :global(h4),
  .prose-glass :global(h5),
  .prose-glass :global(h6) {
    @apply text-text-primary font-bold;
    scroll-margin-top: 6rem;
  }

  .prose-glass :global(h2) {
    @apply text-2xl mt-12 mb-6 pb-2 border-b border-white/10;
  }

  .prose-glass :global(h3) {
    @apply text-xl mt-8 mb-4;
  }

  .prose-glass :global(p) {
    @apply text-text-secondary leading-relaxed;
  }

  .prose-glass :global(blockquote) {
    @apply border-l-4 border-accent-color bg-accent-color/5 rounded-r-lg p-4 my-6;
  }

  .prose-glass :global(blockquote p) {
    @apply text-text-primary font-medium italic;
  }

  .prose-glass :global(code) {
    @apply bg-gray-800 text-accent-color px-2 py-1 rounded text-sm;
  }

  .prose-glass :global(pre) {
    @apply bg-gray-900 border border-white/10 rounded-lg p-4 overflow-x-auto;
  }

  .prose-glass :global(pre code) {
    @apply bg-transparent text-text-primary px-0 py-0;
  }

  .prose-glass :global(a) {
    @apply text-accent-color hover:text-primary-400 transition-colors underline;
  }

  .prose-glass :global(img) {
    @apply rounded-xl shadow-2xl my-8;
  }

  .prose-glass :global(ul),
  .prose-glass :global(ol) {
    @apply text-text-secondary;
  }

  .prose-glass :global(li) {
    @apply my-2;
  }

  .prose-glass :global(table) {
    @apply w-full border-collapse border border-white/20 rounded-lg overflow-hidden;
  }

  .prose-glass :global(th),
  .prose-glass :global(td) {
    @apply border border-white/10 px-4 py-2 text-left;
  }

  .prose-glass :global(th) {
    @apply bg-white/5 font-semibold text-text-primary;
  }

  .prose-glass :global(td) {
    @apply text-text-secondary;
  }

  /* Line clamp utilities */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Smooth scroll for anchor links */
  html {
    scroll-behavior: smooth;
  }

  /* Print styles */
  @media print {
    .prose-glass {
      @apply text-gray-900 bg-white;
    }
    
    .no-print {
      display: none !important;
    }
  }
</style>

<script>
  // Handle table of contents highlighting
  document.addEventListener('DOMContentLoaded', () => {
    const tocLinks = document.querySelectorAll('aside nav a[href^="#"]');
    const headings = document.querySelectorAll('h1[id], h2[id], h3[id], h4[id], h5[id], h6[id]');
    
    if (tocLinks.length === 0 || headings.length === 0) return;
    
    const observerOptions = {
      rootMargin: '-20% 0px -35% 0px',
      threshold: 0
    };
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        const id = entry.target.getAttribute('id');
        const tocLink = document.querySelector(`aside nav a[href="#${id}"]`);
        
        if (tocLink) {
          if (entry.isIntersecting) {
            // Remove active class from all links
            tocLinks.forEach(link => {
              link.classList.remove('text-accent-color', 'font-semibold');
              link.classList.add('text-text-secondary');
            });
            
            // Add active class to current link
            tocLink.classList.remove('text-text-secondary');
            tocLink.classList.add('text-accent-color', 'font-semibold');
          }
        }
      });
    }, observerOptions);
    
    headings.forEach(heading => observer.observe(heading));
  });

  // Handle share functionality
  document.addEventListener('DOMContentLoaded', () => {
    const shareButton = document.querySelector('[aria-label="Chia sẻ bài viết"]');
    
    if (shareButton) {
      shareButton.addEventListener('click', async () => {
        const shareData = {
          title: document.title,
          text: document.querySelector('meta[name="description"]')?.getAttribute('content') || '',
          url: window.location.href
        };
        
        if (navigator.share) {
          try {
            await navigator.share(shareData);
          } catch (err) {
            console.log('Error sharing:', err);
          }
        } else {
          // Fallback: copy to clipboard
          try {
            await navigator.clipboard.writeText(window.location.href);
            // Show feedback (you could implement a toast notification here)
            console.log('Link copied to clipboard');
          } catch (err) {
            console.log('Error copying to clipboard:', err);
          }
        }
      });
    }
  });

  // Reading progress indicator
  document.addEventListener('DOMContentLoaded', () => {
    const progressBar = document.createElement('div');
    progressBar.className = 'fixed top-0 left-0 h-1 bg-accent-color z-50 transition-all duration-300';
    progressBar.style.width = '0%';
    document.body.appendChild(progressBar);
    
    const updateProgress = () => {
      const scrollTop = window.scrollY;
      const docHeight = document.documentElement.scrollHeight - window.innerHeight;
      const scrollPercent = (scrollTop / docHeight) * 100;
      
      progressBar.style.width = `${Math.min(scrollPercent, 100)}%`;
    };
    
    window.addEventListener('scroll', updateProgress);
    updateProgress(); // Initial call
  });
</script>
