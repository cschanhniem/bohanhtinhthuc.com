---
export interface Props {
  class?: string;
  variant?: 'default' | 'hover' | 'interactive' | 'subtle' | 'prominent';
  padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl';
  rounded?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | 'full';
  border?: boolean;
  shadow?: 'none' | 'sm' | 'md' | 'lg' | 'xl';
  animate?: boolean;
  href?: string;
  target?: '_blank' | '_self';
  role?: string;
  ariaLabel?: string;
}

const {
  class: className = '',
  variant = 'default',
  padding = 'md',
  rounded = 'xl',
  border = true,
  shadow = 'lg',
  animate = false,
  href,
  target = '_self',
  role,
  ariaLabel,
  ...props
} = Astro.props;

// Variant styles
const variantClasses = {
  default: 'bg-white/10 backdrop-blur-lg',
  hover: 'bg-white/10 backdrop-blur-lg hover:bg-white/20 hover:scale-[1.02] transition-all duration-300',
  interactive: 'bg-white/10 backdrop-blur-lg hover:bg-white/20 hover:shadow-2xl hover:shadow-accent-color/10 transform transition-all duration-300 cursor-pointer',
  subtle: 'bg-white/5 backdrop-blur-md',
  prominent: 'bg-white/20 backdrop-blur-xl border-white/30'
};

// Padding classes
const paddingClasses = {
  none: '',
  sm: 'p-4',
  md: 'p-6',
  lg: 'p-8',
  xl: 'p-10'
};

// Rounded classes
const roundedClasses = {
  none: '',
  sm: 'rounded-sm',
  md: 'rounded-md',
  lg: 'rounded-lg',
  xl: 'rounded-xl',
  full: 'rounded-full'
};

// Shadow classes
const shadowClasses = {
  none: '',
  sm: 'shadow-sm',
  md: 'shadow-md',
  lg: 'shadow-lg',
  xl: 'shadow-xl shadow-black/20'
};

// Border classes
const borderClass = border ? 'border border-white/20' : '';

// Animation classes
const animationClass = animate ? 'animate-in animate-delay-100' : '';

// Combine all classes
const cardClasses = [
  variantClasses[variant],
  paddingClasses[padding],
  roundedClasses[rounded],
  shadowClasses[shadow],
  borderClass,
  animationClass,
  className
].filter(Boolean).join(' ');

// Component props for accessibility
const componentProps = {
  class: cardClasses,
  role: role || (href ? 'link' : undefined),
  'aria-label': ariaLabel,
  ...props
};

// If href is provided, render as a link
const Component = href ? 'a' : 'div';
const linkProps = href ? { href, target, rel: target === '_blank' ? 'noopener noreferrer' : undefined } : {};
---

<Component {...componentProps} {...linkProps}>
  <slot />
</Component>

<style>
  /* Additional hover effects for interactive cards */
  .glass-card-interactive {
    position: relative;
    overflow: hidden;
  }
  
  .glass-card-interactive::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.1),
      transparent
    );
    transition: left 0.5s;
  }
  
  .glass-card-interactive:hover::before {
    left: 100%;
  }
  
  /* Focus styles for accessibility */
  .glass-card-interactive:focus-visible {
    outline: 2px solid var(--accent-color);
    outline-offset: 2px;
  }
  
  /* Enhanced glass effect */
  .glass-card {
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    background: rgba(255, 255, 255, 0.1);
    box-shadow: 
      0 8px 32px 0 rgba(31, 38, 135, 0.37),
      inset 0 1px 0 0 rgba(255, 255, 255, 0.1);
  }
  
  /* Shimmer effect for loading states */
  .glass-shimmer {
    background: linear-gradient(
      110deg,
      rgba(255, 255, 255, 0.1) 45%,
      rgba(255, 255, 255, 0.2) 50%,
      rgba(255, 255, 255, 0.1) 55%
    );
    background-size: 200% 100%;
    animation: shimmer 2s infinite;
  }
  
  @keyframes shimmer {
    0% {
      background-position: -200% 0;
    }
    100% {
      background-position: 200% 0;
    }
  }
  
  /* Responsive glass effects */
  @media (max-width: 768px) {
    .glass-card {
      backdrop-filter: blur(15px);
      -webkit-backdrop-filter: blur(15px);
    }
  }
  
  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .glass-card {
      background: rgba(0, 0, 0, 0.8);
      border: 2px solid rgba(255, 255, 255, 0.8);
    }
  }
  
  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .glass-card-interactive {
      transition: none;
    }
    
    .glass-card-interactive:hover {
      transform: none;
    }
    
    .animate-in {
      animation: none;
      opacity: 1;
      transform: none;
    }
  }
</style>

<script>
  // Add intersection observer for animation
  if (typeof window !== 'undefined') {
    const observeGlassCards = () => {
      const cards = document.querySelectorAll('.animate-in');
      
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.style.opacity = '1';
            entry.target.style.transform = 'translateY(0)';
          }
        });
      }, {
        threshold: 0.1,
        rootMargin: '50px 0px'
      });
      
      cards.forEach((card) => {
        observer.observe(card);
      });
    };
    
    // Run when DOM is loaded
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', observeGlassCards);
    } else {
      observeGlassCards();
    }
  }
</script>
