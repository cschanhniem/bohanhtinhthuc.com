---
interface MenuItem {
  name: string;
  href: string;
  current?: boolean;
}

const menuItems: MenuItem[] = [
  { name: 'Trang chủ', href: '/' },
  { name: 'Giới thiệu', href: '/gioithieu' },
  { name: 'Hành trình', href: '/hanhtrinh' },
  { name: 'Thư viện', href: '/thuvien' },
  { name: 'Thực hành', href: '/thuchanh' },
  { name: 'Liên hệ', href: '/lienhe' },
];

// Determine current page for navigation highlighting
const currentPath = new URL(Astro.request.url).pathname;
const updatedMenuItems = menuItems.map(item => ({
  ...item,
  current: item.href === currentPath || (item.href !== '/' && currentPath.startsWith(item.href))
}));
---

<nav class="glass-header w-full transition-all duration-300" id="main-navigation" role="navigation" aria-label="Điều hướng chính">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16 md:h-20">
      <!-- Logo & Brand -->
      <div class="flex items-center space-x-4">
        <a href="/" class="flex items-center space-x-3 group" aria-label="Về trang chủ Bộ Hành Tỉnh Thức">
          <div class="w-10 h-10 md:w-12 md:h-12 rounded-full flex items-center justify-center group-hover:scale-110 transition-transform duration-300 overflow-hidden">
            <img 
              src="/assets/logo.png" 
              alt="Logo Bộ Hành Tỉnh Thức" 
              class="w-8 h-8 md:w-9 md:h-9 object-contain"
              loading="eager"
            />
          </div>
          <div class="hidden sm:block">
            <h1 class="text-lg md:text-xl font-bold text-text-primary group-hover:text-accent-color transition-colors duration-300">
              Bộ Hành Tỉnh Thức
            </h1>
            <p class="text-xs text-text-secondary hidden md:block">
              Đi không ngừng nghỉ, sống trọn từng khoảnh khắc
            </p>
          </div>
        </a>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden md:block">
        <div class="ml-10 flex items-baseline space-x-1">
          {updatedMenuItems.map((item) => (
            <a
              href={item.href}
              class={`px-4 py-2 rounded-lg text-sm font-medium transition-all duration-300 ${
                item.current
                  ? 'bg-accent-color/20 text-accent-color border border-accent-color/30'
                  : 'text-text-primary hover:text-accent-color hover:bg-white/10'
              }`}
              aria-current={item.current ? 'page' : undefined}
            >
              {item.name}
            </a>
          ))}
        </div>
      </div>

      <!-- Mobile menu button -->
      <div class="md:hidden">
        <button
          type="button"
          class="glass-card p-2 rounded-lg text-text-primary hover:text-accent-color hover:bg-white/20 focus:outline-none focus:ring-2 focus:ring-accent-color transition-all duration-300"
          aria-controls="mobile-menu"
          aria-expanded="false"
          id="mobile-menu-button"
        >
          <span class="sr-only">Mở menu chính</span>
          <!-- Hamburger icon -->
          <svg class="block h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" id="menu-icon">
            <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
          </svg>
          <!-- Close icon (hidden by default) -->
          <svg class="hidden h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" id="close-icon">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu -->
  <div class="md:hidden hidden" id="mobile-menu">
    <div class="px-2 pt-2 pb-3 space-y-1 glass-card mx-4 mb-4 rounded-xl">
      {updatedMenuItems.map((item) => (
        <a
          href={item.href}
          class={`block px-4 py-3 rounded-lg text-base font-medium transition-all duration-300 ${
            item.current
              ? 'bg-accent-color/20 text-accent-color border border-accent-color/30'
              : 'text-text-primary hover:text-accent-color hover:bg-white/10'
          }`}
          aria-current={item.current ? 'page' : undefined}
        >
          {item.name}
        </a>
      ))}
    </div>
  </div>
</nav>

<script>
  // Mobile menu functionality
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuIcon = document.getElementById('menu-icon');
    const closeIcon = document.getElementById('close-icon');
    
    if (mobileMenuButton && mobileMenu && menuIcon && closeIcon) {
      let isMenuOpen = false;
      
      mobileMenuButton.addEventListener('click', () => {
        isMenuOpen = !isMenuOpen;
        
        // Toggle menu visibility
        if (isMenuOpen) {
          mobileMenu.classList.remove('hidden');
          mobileMenu.classList.add('animate-slide-up');
          menuIcon.classList.add('hidden');
          closeIcon.classList.remove('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'true');
        } else {
          mobileMenu.classList.add('hidden');
          mobileMenu.classList.remove('animate-slide-up');
          menuIcon.classList.remove('hidden');
          closeIcon.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
        }
      });
      
      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        if (isMenuOpen && !mobileMenuButton.contains(e.target as Node) && !mobileMenu.contains(e.target as Node)) {
          isMenuOpen = false;
          mobileMenu.classList.add('hidden');
          menuIcon.classList.remove('hidden');
          closeIcon.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
        }
      });
      
      // Close menu on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && isMenuOpen) {
          isMenuOpen = false;
          mobileMenu.classList.add('hidden');
          menuIcon.classList.remove('hidden');
          closeIcon.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
          mobileMenuButton.focus();
        }
      });
    }
  });

  // Add scroll effect to header
  let lastScrollY = 0;
  const header = document.getElementById('main-navigation');
  
  window.addEventListener('scroll', () => {
    const currentScrollY = window.scrollY;
    
    if (header) {
      if (currentScrollY > lastScrollY && currentScrollY > 100) {
        // Scrolling down - hide header
        header.style.transform = 'translateY(-100%)';
      } else {
        // Scrolling up - show header
        header.style.transform = 'translateY(0)';
      }
      
      // Add/remove backdrop blur based on scroll position
      if (currentScrollY > 50) {
        header.classList.add('backdrop-blur-xl');
        header.style.backgroundColor = 'rgba(255, 255, 255, 0.1)';
      } else {
        header.classList.remove('backdrop-blur-xl');
        header.style.backgroundColor = 'rgba(255, 255, 255, 0.05)';
      }
    }
    
    lastScrollY = currentScrollY;
  });
</script>

<style>
  .animate-slide-up {
    animation: slideDown 0.3s ease-out forwards;
  }
  
  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  #main-navigation {
    transition: transform 0.3s ease-in-out, background-color 0.3s ease-in-out;
  }
</style>
