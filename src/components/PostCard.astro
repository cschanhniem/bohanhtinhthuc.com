---
import { Image } from 'astro:assets';
import GlassCard from './GlassCard.astro';
import Button from './Button.astro';

export interface Props {
  title: string;
  description: string;
  pubDate: Date | string;
  author?: string;
  image?: {
    url: string;
    alt: string;
  };
  tags?: string[];
  href: string;
  readingTime?: string;
  featured?: boolean;
  variant?: 'default' | 'featured' | 'compact';
  class?: string;
}

const {
  title,
  description,
  pubDate,
  author = 'Người Bộ Hành',
  image,
  tags = [],
  href,
  readingTime,
  featured = false,
  variant = 'default',
  class: className = ''
} = Astro.props;

// Format date
const formatDate = (date: Date | string) => {
  const d = new Date(date);
  return d.toLocaleDateString('vi-VN', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

// Calculate reading time if not provided
const calculateReadingTime = (text: string) => {
  const wordsPerMinute = 200;
  const words = text.split(/\s+/).length;
  const minutes = Math.ceil(words / wordsPerMinute);
  return `${minutes} phút đọc`;
};

// Variant-specific classes
const variantClasses = {
  default: 'max-w-sm',
  featured: 'max-w-2xl',
  compact: 'max-w-xs'
};

const imageAspects = {
  default: 'aspect-[4/3]',
  featured: 'aspect-[16/9]',
  compact: 'aspect-square'
};

// Default image if none provided
const defaultImage = {
  url: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',
  alt: 'Hình ảnh thiên nhiên Việt Nam'
};

const cardImage = image || defaultImage;
---

<article 
  class={`group ${variantClasses[variant]} ${className}`}
  itemscope 
  itemtype="https://schema.org/BlogPosting"
>
  <GlassCard 
    variant="hover" 
    class="h-full overflow-hidden"
    ariaLabel={`Đọc bài viết: ${title}`}
  >
    {/* Featured badge */}
    {featured && (
      <div class="absolute top-4 left-4 z-10">
        <span class="glass-card px-3 py-1 text-xs font-semibold text-accent-color border border-accent-color/30 rounded-full">
          Nổi bật
        </span>
      </div>
    )}

    {/* Image */}
    <div class={`relative ${imageAspects[variant]} overflow-hidden`}>
      <img
        src={cardImage.url}
        alt={cardImage.alt}
        class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
        loading="lazy"
        itemprop="image"
      />
      
      {/* Gradient overlay */}
      <div class="absolute inset-0 bg-gradient-to-t from-gray-900/80 via-transparent to-transparent"></div>
      
      {/* Reading time overlay */}
      {readingTime && (
        <div class="absolute bottom-4 right-4">
          <span class="glass-card px-2 py-1 text-xs text-text-primary">
            <svg class="inline w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            {readingTime}
          </span>
        </div>
      )}
    </div>

    {/* Content */}
    <div class={`p-6 ${variant === 'featured' ? 'lg:p-8' : ''}`}>
      {/* Tags */}
      {tags.length > 0 && (
        <div class="flex flex-wrap gap-2 mb-3">
          {tags.slice(0, 3).map((tag) => (
            <span 
              class="px-2 py-1 text-xs font-medium text-accent-color bg-accent-color/10 rounded-md border border-accent-color/20"
              itemprop="keywords"
            >
              #{tag}
            </span>
          ))}
          {tags.length > 3 && (
            <span class="px-2 py-1 text-xs text-text-secondary">
              +{tags.length - 3} khác
            </span>
          )}
        </div>
      )}

      {/* Title */}
      <h3 
        class={`font-bold text-text-primary mb-3 line-clamp-2 group-hover:text-accent-color transition-colors duration-300 ${
          variant === 'featured' ? 'text-2xl lg:text-3xl' : 
          variant === 'compact' ? 'text-lg' : 'text-xl'
        }`}
        itemprop="headline"
      >
        <a href={href} class="stretched-link">
          {title}
        </a>
      </h3>

      {/* Description */}
      <p 
        class={`text-text-secondary mb-4 ${
          variant === 'featured' ? 'text-lg line-clamp-3' : 
          variant === 'compact' ? 'text-sm line-clamp-2' : 'line-clamp-3'
        }`}
        itemprop="description"
      >
        {description}
      </p>

      {/* Meta info */}
      <div class="flex items-center justify-between text-sm text-text-secondary">
        <div class="flex items-center space-x-3">
          <div class="flex items-center space-x-2">
            <div class="w-6 h-6 bg-accent-color/20 rounded-full flex items-center justify-center">
              <svg class="w-3 h-3 text-accent-color" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
              </svg>
            </div>
            <span itemprop="author" itemscope itemtype="https://schema.org/Person">
              <span itemprop="name">{author}</span>
            </span>
          </div>
          
          <div class="flex items-center space-x-1">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            <time 
              datetime={new Date(pubDate).toISOString()} 
              itemprop="datePublished"
              class="hover:text-accent-color transition-colors"
            >
              {formatDate(pubDate)}
            </time>
          </div>
        </div>

        {/* Action buttons for featured cards */}
        {variant === 'featured' && (
          <div class="flex items-center space-x-2">
            <Button
              variant="ghost"
              size="sm"
              icon="heart"
              ariaLabel="Lưu bài viết"
              class="opacity-60 hover:opacity-100"
            />
            <Button
              variant="ghost"
              size="sm"
              icon="share"
              ariaLabel="Chia sẻ bài viết"
              class="opacity-60 hover:opacity-100"
            />
          </div>
        )}
      </div>

      {/* Call to action */}
      {variant === 'featured' && (
        <div class="mt-6">
          <Button
            variant="outline"
            href={href}
            icon="arrow"
            iconPosition="right"
            class="group-hover:bg-accent-color group-hover:text-gray-900 group-hover:border-accent-color"
          >
            Đọc tiếp
          </Button>
        </div>
      )}
    </div>

    {/* Schema.org structured data */}
    <meta itemprop="url" content={href} />
    <meta itemprop="dateModified" content={new Date(pubDate).toISOString()} />
    <meta itemprop="wordCount" content="500" />
    <meta itemprop="inLanguage" content="vi-VN" />
  </GlassCard>
</article>

<style>
  /* Line clamp utilities */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Stretched link for better click area */
  .stretched-link::after {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 1;
    content: "";
  }
  
  /* Ensure buttons are above the stretched link */
  .stretched-link ~ * {
    position: relative;
    z-index: 2;
  }
  
  /* Image hover effect */
  .group:hover .group-hover\:scale-110 {
    transform: scale(1.1);
  }
  
  /* Focus styles for accessibility */
  .stretched-link:focus-visible {
    outline: 2px solid var(--accent-color);
    outline-offset: 2px;
    border-radius: 0.75rem;
  }
  
  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .glass-card {
      border-width: 2px;
    }
    
    .line-clamp-2,
    .line-clamp-3 {
      -webkit-line-clamp: unset;
      -webkit-box-orient: unset;
      display: block;
    }
  }
  
  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .group:hover .group-hover\:scale-110 {
      transform: none;
    }
    
    * {
      transition: none !important;
    }
  }
  
  /* Print styles */
  @media print {
    .glass-card {
      background: white;
      border: 1px solid #ccc;
      box-shadow: none;
    }
    
    .stretched-link::after {
      display: none;
    }
  }
</style>

<script>
  // Lazy loading and intersection observer for images
  if (typeof window !== 'undefined') {
    const observeImages = () => {
      const images = document.querySelectorAll('article img[loading="lazy"]');
      
      const imageObserver = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const img = entry.target as HTMLImageElement;
            img.src = img.src; // Trigger loading
            imageObserver.unobserve(img);
          }
        });
      }, {
        rootMargin: '50px'
      });
      
      images.forEach((img) => imageObserver.observe(img));
    };
    
    // Track article interactions for analytics
    const trackArticleView = () => {
      const articles = document.querySelectorAll('article[itemtype="https://schema.org/BlogPosting"]');
      
      const viewObserver = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const article = entry.target as HTMLElement;
            const title = article.querySelector('[itemprop="headline"]')?.textContent;
            
            // Track view event (placeholder for analytics)
            console.log('Article viewed:', title);
            
            viewObserver.unobserve(article);
          }
        });
      }, {
        threshold: 0.5,
        rootMargin: '0px'
      });
      
      articles.forEach((article) => viewObserver.observe(article));
    };
    
    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        observeImages();
        trackArticleView();
      });
    } else {
      observeImages();
      trackArticleView();
    }
  }
</script>
