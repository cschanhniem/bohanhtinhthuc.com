---
import { getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import GlassCard from '../components/GlassCard.astro';
import PostCard from '../components/PostCard.astro';
import Button from '../components/Button.astro';

// Temporarily disabled for build issues
// const allPosts = await getCollection('thuchanh');
const allPosts: any[] = [];

// Filter published posts and sort by date
const publishedPosts = allPosts
  .filter(post => !post.data?.draft)
  .sort((a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime());

// Get featured posts
const featuredPosts = publishedPosts.filter(post => post.data.featured);
const regularPosts = publishedPosts.filter(post => !post.data.featured);

// Group posts by category
const postsByCategory = publishedPosts.reduce((groups, post) => {
  const category = post.data.category || 'ch√°nh ni·ªám';
  if (!groups[category]) groups[category] = [];
  groups[category].push(post);
  return groups;
}, {} as Record<string, typeof publishedPosts>);

// Group by difficulty
const postsByDifficulty = publishedPosts.reduce((groups, post) => {
  const difficulty = post.data.difficulty || 'd·ªÖ';
  if (!groups[difficulty]) groups[difficulty] = [];
  groups[difficulty].push(post);
  return groups;
}, {} as Record<string, typeof publishedPosts>);

// Get all unique categories and difficulties
const categories = Object.keys(postsByCategory);
const difficulties = ['d·ªÖ', 'trung b√¨nh', 'kh√≥'];

// Practice stats
const totalPractices = publishedPosts.length;
const practicesByDifficulty = {
  easy: postsByDifficulty['d·ªÖ']?.length || 0,
  medium: postsByDifficulty['trung b√¨nh']?.length || 0,
  hard: postsByDifficulty['kh√≥']?.length || 0
};

// Category information
const categoryInfo = {
  'thi·ªÅn ƒëi': {
    icon: 'üö∂',
    description: 'Th·ª±c h√†nh thi·ªÅn trong chuy·ªÉn ƒë·ªông, bi·∫øn m·ªói b∆∞·ªõc ch√¢n th√†nh c∆° h·ªôi t·ªânh th·ª©c',
    color: 'emerald'
  },
  'ch√°nh ni·ªám': {
    icon: 'üßò',
    description: 'Ph√°t tri·ªÉn kh·∫£ nƒÉng quan s√°t v√† √Ω th·ª©c v·ªÅ hi·ªán t·∫°i',
    color: 'blue'
  },
  'ƒÉn u·ªëng': {
    icon: 'üçΩÔ∏è',
    description: 'Th·ª±c h√†nh ch√°nh ni·ªám trong vi·ªác ƒÉn u·ªëng v√† tr√¢n tr·ªçng th·ª©c ƒÉn',
    color: 'orange'
  },
  'h∆°i th·ªü': {
    icon: 'üå¨Ô∏è',
    description: 'S·ª≠ d·ª•ng h∆°i th·ªü nh∆∞ c·∫ßu n·ªëi gi·ªØa th√¢n v√† t√¢m',
    color: 'cyan'
  },
  'quan s√°t': {
    icon: 'üëÅÔ∏è',
    description: 'R√®n luy·ªán kh·∫£ nƒÉng quan s√°t kh√¥ng ph√°n x√©t',
    color: 'purple'
  },
  'bi·∫øt ∆°n': {
    icon: 'üôè',
    description: 'Ph√°t tri·ªÉn l√≤ng bi·∫øt ∆°n v√† tr√¢n tr·ªçng cu·ªôc s·ªëng',
    color: 'pink'
  },
  't·ª´ bi': {
    icon: '‚ù§Ô∏è',
    description: 'Nu√¥i d∆∞·ª°ng t√¨nh th∆∞∆°ng v√† l√≤ng t·ª´ bi ƒë·ªëi v·ªõi b·∫£n th√¢n v√† ng∆∞·ªùi kh√°c',
    color: 'red'
  },
  'tƒ©nh l·∫∑ng': {
    icon: 'üîá',
    description: 'T√¨m v·ªÅ s·ª± tƒ©nh l·∫∑ng v√† b√¨nh an n·ªôi t·∫°i',
    color: 'gray'
  }
};
---

<BaseLayout 
  title="Th·ª±c h√†nh t·ªânh th·ª©c"
  description="Kh√°m ph√° c√°c ph∆∞∆°ng ph√°p th·ª±c h√†nh t·ªânh th·ª©c, thi·ªÅn ƒë·ªãnh v√† s·ªëng ch√°nh ni·ªám. H∆∞·ªõng d·∫´n chi ti·∫øt t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu."
>
  <Header slot="header" />

  <!-- Hero Section -->
  <section class="relative py-24 lg:py-32 overflow-hidden">
    <div class="absolute inset-0 z-0">
      <div 
        class="absolute inset-0 bg-cover bg-center"
        style="background-image: url('https://images.unsplash.com/photo-1506629905645-b178a0b13bc8?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&q=80')"
      ></div>
      <div class="absolute inset-0 bg-gradient-to-b from-gray-900/70 via-gray-900/50 to-gray-900/70"></div>
    </div>

    <div class="relative z-10 max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h1 class="text-4xl md:text-5xl lg:text-6xl font-bold text-text-primary mb-8 leading-tight">
          <span class="text-gradient">Th·ª±c h√†nh</span> t·ªânh th·ª©c
        </h1>
        
        <p class="text-xl md:text-2xl text-text-secondary max-w-4xl mx-auto leading-relaxed">
          Nh·ªØng ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n nh∆∞ng s√¢u s·∫Øc ƒë·ªÉ s·ªëng tr·ªçn v·∫πn h∆°n, 
          t√¨m v·ªÅ s·ª± b√¨nh an v√† ph√°t tri·ªÉn t√¢m linh trong cu·ªôc s·ªëng h√†ng ng√†y.
        </p>
      </div>

      <!-- Practice Statistics -->
      <GlassCard class="max-w-4xl mx-auto">
        <div class="grid grid-cols-2 md:grid-cols-4 gap-6 text-center">
          <div>
            <div class="text-3xl md:text-4xl font-bold text-accent-color mb-2">{totalPractices}</div>
            <div class="text-sm text-text-secondary">B√†i th·ª±c h√†nh</div>
          </div>
          <div>
            <div class="text-3xl md:text-4xl font-bold text-accent-color mb-2">{practicesByDifficulty.easy}</div>
            <div class="text-sm text-text-secondary">D√†nh cho ng∆∞·ªùi m·ªõi</div>
          </div>
          <div>
            <div class="text-3xl md:text-4xl font-bold text-accent-color mb-2">{categories.length}</div>
            <div class="text-sm text-text-secondary">Ch·ªß ƒë·ªÅ</div>
          </div>
          <div>
            <div class="text-3xl md:text-4xl font-bold text-accent-color mb-2">‚àû</div>
            <div class="text-sm text-text-secondary">L·ª£i √≠ch</div>
          </div>
        </div>
      </GlassCard>
    </div>
  </section>

  <!-- Quick Start Guide -->
  <section class="py-16 lg:py-24">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h2 class="text-3xl md:text-4xl font-bold text-text-primary mb-4">
          B·∫Øt ƒë·∫ßu h√†nh tr√¨nh th·ª±c h√†nh
        </h2>
        <p class="text-lg text-text-secondary max-w-2xl mx-auto">
          B·∫°n m·ªõi b·∫Øt ƒë·∫ßu? H√£y theo nh·ªØng b∆∞·ªõc ƒë∆°n gi·∫£n n√†y ƒë·ªÉ b·∫Øt ƒë·∫ßu h√†nh tr√¨nh t·ªânh th·ª©c c·ªßa m√¨nh
        </p>
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
        <!-- Step 1 -->
        <GlassCard padding="lg" class="text-center animate-in animate-delay-100">
          <div class="w-16 h-16 bg-accent-color/20 rounded-full flex items-center justify-center mx-auto mb-6">
            <span class="text-2xl font-bold text-accent-color">1</span>
          </div>
          <h3 class="text-xl font-semibold text-text-primary mb-4">Ch·ªçn ph∆∞∆°ng ph√°p ph√π h·ª£p</h3>
          <p class="text-text-secondary mb-6 leading-relaxed">
            B·∫Øt ƒë·∫ßu v·ªõi nh·ªØng th·ª±c h√†nh ƒë∆°n gi·∫£n nh∆∞ thi·ªÅn h∆°i th·ªü ho·∫∑c thi·ªÅn ƒëi. 
            Ch·ªçn ƒëi·ªÅu g√¨ c·∫£m th·∫•y t·ª± nhi√™n nh·∫•t v·ªõi b·∫°n.
          </p>
          <Button variant="ghost" href="#beginner-practices" size="sm">
            Xem b√†i th·ª±c h√†nh cho ng∆∞·ªùi m·ªõi
          </Button>
        </GlassCard>

        <!-- Step 2 -->
        <GlassCard padding="lg" class="text-center animate-in animate-delay-200">
          <div class="w-16 h-16 bg-accent-color/20 rounded-full flex items-center justify-center mx-auto mb-6">
            <span class="text-2xl font-bold text-accent-color">2</span>
          </div>
          <h3 class="text-xl font-semibold text-text-primary mb-4">Th·ª±c h√†nh ƒë·ªÅu ƒë·∫∑n</h3>
          <p class="text-text-secondary mb-6 leading-relaxed">
            B·∫Øt ƒë·∫ßu v·ªõi 5-10 ph√∫t m·ªói ng√†y. S·ª± ki√™n tr√¨ quan tr·ªçng h∆°n th·ªùi gian d√†i. 
            Th·ª±c h√†nh ƒë·ªÅu ƒë·∫∑n s·∫Ω mang l·∫°i k·∫øt qu·∫£ b·ªÅn v·ªØng.
          </p>
          <Button variant="ghost" href="#daily-practices" size="sm">
            L·∫≠p th√≥i quen h√†ng ng√†y
          </Button>
        </GlassCard>

        <!-- Step 3 -->
        <GlassCard padding="lg" class="text-center animate-in animate-delay-300">
          <div class="w-16 h-16 bg-accent-color/20 rounded-full flex items-center justify-center mx-auto mb-6">
            <span class="text-2xl font-bold text-accent-color">3</span>
          </div>
          <h3 class="text-xl font-semibold text-text-primary mb-4">√Åp d·ª•ng v√†o cu·ªôc s·ªëng</h3>
          <p class="text-text-secondary mb-6 leading-relaxed">
            D·∫ßn d·∫ßn m·ªü r·ªông th·ª±c h√†nh v√†o c√°c ho·∫°t ƒë·ªông h√†ng ng√†y nh∆∞ ƒÉn u·ªëng, 
            ƒëi b·ªô, l√†m vi·ªác ƒë·ªÉ s·ªëng t·ªânh th·ª©c h∆°n.
          </p>
          <Button variant="ghost" href="#advanced-practices" size="sm">
            Th·ª±c h√†nh n√¢ng cao
          </Button>
        </GlassCard>
      </div>
    </div>
  </section>

  <!-- Featured Practices -->
  {featuredPosts.length > 0 && (
    <section class="py-16 lg:py-24 bg-gradient-to-b from-transparent to-gray-900/30">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center mb-12">
          <h2 class="text-3xl md:text-4xl font-bold text-text-primary mb-4">
            Th·ª±c h√†nh n·ªïi b·∫≠t
          </h2>
          <p class="text-lg text-text-secondary max-w-2xl mx-auto">
            Nh·ªØng ph∆∞∆°ng ph√°p ƒë∆∞·ª£c ƒë√°nh gi√° cao v√† ph√π h·ª£p cho m·ªçi ƒë·ªëi t∆∞·ª£ng
          </p>
        </div>
        
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {featuredPosts.slice(0, 2).map((post, index) => (
            <div class={`animate-in animate-delay-${(index + 1) * 100}`}>
              <PostCard
                title={post.data.title}
                description={post.data.description}
                pubDate={post.data.pubDate}
                author={post.data.author}
                image={post.data.image}
                tags={post.data.tags}
                href={`/thuchanh/${post.slug}`}
                readingTime={post.data.readingTime ? `${post.data.readingTime} ph√∫t ƒë·ªçc` : undefined}
                featured={true}
                variant="featured"
              />
            </div>
          ))}
        </div>
      </div>
    </section>
  )}

  <!-- Practice Categories -->
  <section class="py-16 lg:py-24" id="categories">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h2 class="text-3xl md:text-4xl font-bold text-text-primary mb-4">
          Kh√°m ph√° theo ch·ªß ƒë·ªÅ
        </h2>
        <p class="text-lg text-text-secondary max-w-2xl mx-auto">
          T√¨m hi·ªÉu c√°c ph∆∞∆°ng ph√°p th·ª±c h√†nh theo t·ª´ng lƒ©nh v·ª±c c·ª• th·ªÉ
        </p>
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {categories.map((category, index) => {
          const info = categoryInfo[category as keyof typeof categoryInfo] || {
            icon: 'üßò',
            description: 'Th·ª±c h√†nh t·ªânh th·ª©c',
            color: 'emerald'
          };
          const postCount = postsByCategory[category].length;
          
          return (
            <GlassCard 
              variant="hover" 
              padding="lg" 
              class={`text-center group cursor-pointer animate-in animate-delay-${((index % 4) + 1) * 100}`}
              data-category={category}
            >
              <div class="text-4xl mb-4">{info.icon}</div>
              <h3 class="text-lg font-semibold text-text-primary mb-2 capitalize">
                {category}
              </h3>
              <p class="text-sm text-text-secondary mb-4 leading-relaxed">
                {info.description}
              </p>
              <div class="flex items-center justify-between">
                <span class="text-xs text-accent-color font-medium">
                  {postCount} b√†i th·ª±c h√†nh
                </span>
                <svg class="w-4 h-4 text-accent-color group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </div>
            </GlassCard>
          );
        })}
      </div>
    </div>
  </section>

  <!-- Difficulty Levels -->
  <section class="py-16 lg:py-24 bg-gradient-to-b from-gray-900/30 to-transparent">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h2 class="text-3xl md:text-4xl font-bold text-text-primary mb-4">
          Ch·ªçn theo tr√¨nh ƒë·ªô
        </h2>
        <p class="text-lg text-text-secondary max-w-2xl mx-auto">
          T·ª´ ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu ƒë·∫øn nh·ªØng ai ƒë√£ c√≥ kinh nghi·ªám th·ª±c h√†nh
        </p>
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
        {difficulties.map((difficulty, index) => {
          const posts = postsByDifficulty[difficulty] || [];
          const difficultyInfo = {
            'd·ªÖ': {
              icon: 'üå±',
              title: 'Ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu',
              description: 'Nh·ªØng th·ª±c h√†nh ƒë∆°n gi·∫£n, d·ªÖ th·ª±c hi·ªán cho ng∆∞·ªùi m·ªõi',
              color: 'green'
            },
            'trung b√¨nh': {
              icon: 'üåø',
              title: 'ƒê√£ c√≥ kinh nghi·ªám',
              description: 'Ph√°t tri·ªÉn s√¢u h∆°n c√°c k·ªπ nƒÉng ƒë√£ h·ªçc',
              color: 'yellow'
            },
            'kh√≥': {
              icon: 'üå≥',
              title: 'N√¢ng cao',
              description: 'Nh·ªØng th·ª±c h√†nh s√¢u s·∫Øc cho ng∆∞·ªùi c√≥ kinh nghi·ªám',
              color: 'red'
            }
          };
          
          const info = difficultyInfo[difficulty as keyof typeof difficultyInfo];
          
          return (
            <GlassCard 
              padding="lg" 
              class={`text-center animate-in animate-delay-${(index + 1) * 100}`}
            >
              <div class="text-4xl mb-4">{info.icon}</div>
              <h3 class="text-xl font-semibold text-text-primary mb-2">
                {info.title}
              </h3>
              <p class="text-text-secondary mb-6 leading-relaxed">
                {info.description}
              </p>
              
              <div class="space-y-3 mb-6">
                {posts.slice(0, 3).map(post => (
                  <div class="text-left">
                    <h4 class="text-sm font-medium text-text-primary hover:text-accent-color transition-colors">
                      <a href={`/thuchanh/${post.slug}`}>{post.data.title}</a>
                    </h4>
                    {post.data.duration && (
                      <p class="text-xs text-text-secondary">‚è±Ô∏è {post.data.duration}</p>
                    )}
                  </div>
                ))}
              </div>
              
              <Button
                variant="outline"
                size="sm"
                class="w-full"
                data-difficulty={difficulty}
              >
                Xem t·∫•t c·∫£ ({posts.length})
              </Button>
            </GlassCard>
          );
        })}
      </div>
    </div>
  </section>

  <!-- All Practices -->
  <section class="py-16 lg:py-24" id="all-practices">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      
      <!-- Filter Controls -->
      <div class="flex flex-col lg:flex-row items-start lg:items-center justify-between mb-12 space-y-4 lg:space-y-0">
        <div>
          <h2 class="text-3xl md:text-4xl font-bold text-text-primary mb-2">
            T·∫•t c·∫£ b√†i th·ª±c h√†nh
          </h2>
          <p class="text-lg text-text-secondary">
            Kh√°m ph√° to√†n b·ªô kho t√†ng th·ª±c h√†nh t·ªânh th·ª©c
          </p>
        </div>
        
        <!-- Filters -->
        <div class="flex flex-wrap items-center gap-4">
          <select 
            class="glass-card px-3 py-2 text-text-primary text-sm rounded-lg border-white/20 focus:outline-none focus:ring-2 focus:ring-accent-color"
            id="category-filter"
          >
            <option value="">T·∫•t c·∫£ ch·ªß ƒë·ªÅ</option>
            {categories.map(category => (
              <option value={category}>{category}</option>
            ))}
          </select>

          <select 
            class="glass-card px-3 py-2 text-text-primary text-sm rounded-lg border-white/20 focus:outline-none focus:ring-2 focus:ring-accent-color"
            id="difficulty-filter"
          >
            <option value="">T·∫•t c·∫£ m·ª©c ƒë·ªô</option>
            {difficulties.map(difficulty => (
              <option value={difficulty}>{difficulty}</option>
            ))}
          </select>

          <input
            type="text"
            placeholder="T√¨m ki·∫øm..."
            class="glass-card px-3 py-2 text-text-primary placeholder-text-secondary text-sm rounded-lg border-white/20 focus:outline-none focus:ring-2 focus:ring-accent-color w-48"
            id="search-input"
          />
        </div>
      </div>

      <!-- Practices Grid -->
      <div id="practices-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {regularPosts.map((post, index) => (
          <div 
            class={`practice-item animate-in animate-delay-${((index % 6) + 1) * 100}`}
            data-category={post.data.category}
            data-difficulty={post.data.difficulty}
            data-title={post.data.title.toLowerCase()}
            data-description={post.data.description.toLowerCase()}
            data-tags={post.data.tags.join(',')}
          >
            <PostCard
              title={post.data.title}
              description={post.data.description}
              pubDate={post.data.pubDate}
              author={post.data.author}
              image={post.data.image}
              tags={post.data.tags}
              href={`/thuchanh/${post.slug}`}
              readingTime={post.data.readingTime ? `${post.data.readingTime} ph√∫t ƒë·ªçc` : undefined}
              variant="default"
            />
          </div>
        ))}
      </div>

      <!-- No Results -->
      <div id="no-results" class="hidden text-center py-16">
        <div class="w-24 h-24 bg-accent-color/20 rounded-full flex items-center justify-center mx-auto mb-6">
          <svg class="w-12 h-12 text-accent-color/60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
        <h3 class="text-xl font-semibold text-text-primary mb-4">
          Kh√¥ng t√¨m th·∫•y b√†i th·ª±c h√†nh n√†o
        </h3>
        <p class="text-text-secondary mb-6">
          Th·ª≠ thay ƒë·ªïi b·ªô l·ªçc ho·∫∑c t·ª´ kh√≥a t√¨m ki·∫øm
        </p>
        <Button variant="outline" id="clear-filters">
          X√≥a t·∫•t c·∫£ b·ªô l·ªçc
        </Button>
      </div>
    </div>
  </section>

  <!-- Newsletter CTA -->
  <section class="py-16 lg:py-24">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <GlassCard padding="xl" class="text-center">
        <h2 class="text-2xl md:text-3xl font-bold text-text-primary mb-6">
          Nh·∫≠n b√†i th·ª±c h√†nh m·ªõi
        </h2>
        
        <p class="text-lg text-text-secondary mb-8 max-w-2xl mx-auto">
          ƒêƒÉng k√Ω ƒë·ªÉ nh·∫≠n th√¥ng b√°o v·ªÅ nh·ªØng b√†i th·ª±c h√†nh m·ªõi v√† tips t·ªânh th·ª©c h√†ng ng√†y
        </p>
        
        <form class="max-w-md mx-auto" aria-label="ƒêƒÉng k√Ω nh·∫≠n b√†i th·ª±c h√†nh">
          <div class="flex flex-col sm:flex-row gap-4">
            <input
              type="email"
              placeholder="Email c·ªßa b·∫°n"
              class="flex-1 px-4 py-3 glass-card text-text-primary placeholder-text-secondary border-white/20 rounded-lg focus:outline-none focus:ring-2 focus:ring-accent-color focus:border-accent-color transition-all duration-300"
              required
            />
            <Button
              type="submit"
              variant="primary"
              size="md"
              class="px-8 py-3 whitespace-nowrap"
            >
              ƒêƒÉng k√Ω
            </Button>
          </div>
        </form>
      </GlassCard>
    </div>
  </section>

  <Footer slot="footer" />
</BaseLayout>

<style>
  .text-gradient {
    background: linear-gradient(135deg, #34d399, #22c55e, #16a34a);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
  
  /* Animation styles */
  .animate-in {
    animation: slideUp 0.6s ease-out forwards;
    opacity: 0;
    transform: translateY(20px);
  }
  
  .animate-delay-100 { animation-delay: 0.1s; }
  .animate-delay-200 { animation-delay: 0.2s; }
  .animate-delay-300 { animation-delay: 0.3s; }
  .animate-delay-400 { animation-delay: 0.4s; }
  .animate-delay-500 { animation-delay: 0.5s; }
  .animate-delay-600 { animation-delay: 0.6s; }
  
  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .animate-in {
      animation: none;
      opacity: 1;
      transform: none;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Filter functionality
    const categoryFilter = document.getElementById('category-filter') as HTMLSelectElement;
    const difficultyFilter = document.getElementById('difficulty-filter') as HTMLSelectElement;
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const clearFilters = document.getElementById('clear-filters');
    const noResults = document.getElementById('no-results');
    
    function filterPractices() {
      const categoryValue = categoryFilter?.value;
      const difficultyValue = difficultyFilter?.value;
      const searchValue = searchInput?.value.toLowerCase();
      
      const practiceItems = document.querySelectorAll('.practice-item');
      let visibleCount = 0;
      
      practiceItems.forEach(item => {
        const category = item.getAttribute('data-category');
        const difficulty = item.getAttribute('data-difficulty');
        const title = item.getAttribute('data-title');
        const description = item.getAttribute('data-description');
        const tags = item.getAttribute('data-tags');
        
        const matchesCategory = !categoryValue || category === categoryValue;
        const matchesDifficulty = !difficultyValue || difficulty === difficultyValue;
        const matchesSearch = !searchValue || 
          title?.includes(searchValue) || 
          description?.includes(searchValue) ||
          tags?.includes(searchValue);
        
        if (matchesCategory && matchesDifficulty && matchesSearch) {
          (item as HTMLElement).style.display = '';
          visibleCount++;
        } else {
          (item as HTMLElement).style.display = 'none';
        }
      });
      
      // Show/hide no results message
      if (visibleCount === 0) {
        noResults?.classList.remove('hidden');
      } else {
        noResults?.classList.add('hidden');
      }
    }
    
    // Add event listeners for filters
    categoryFilter?.addEventListener('change', filterPractices);
    difficultyFilter?.addEventListener('change', filterPractices);
    searchInput?.addEventListener('input', filterPractices);
    
    // Clear filters
    clearFilters?.addEventListener('click', () => {
      if (categoryFilter) categoryFilter.value = '';
      if (difficultyFilter) difficultyFilter.value = '';
      if (searchInput) searchInput.value = '';
      filterPractices();
    });
    
    // Category card clicks
    const categoryCards = document.querySelectorAll('[data-category]');
    categoryCards.forEach(card => {
      card.addEventListener('click', () => {
        const category = card.getAttribute('data-category');
        if (categoryFilter && category) {
          categoryFilter.value = category;
          filterPractices();
          
          // Scroll to practices section
          document.getElementById('all-practices')?.scrollIntoView({ 
            behavior: 'smooth' 
          });
        }
      });
    });
    
    // Difficulty button clicks
    const difficultyButtons = document.querySelectorAll('[data-difficulty]');
    difficultyButtons.forEach(button => {
      button.addEventListener('click', () => {
        const difficulty = button.getAttribute('data-difficulty');
        if (difficultyFilter && difficulty) {
          difficultyFilter.value = difficulty;
          filterPractices();
          
          // Scroll to practices section
          document.getElementById('all-practices')?.scrollIntoView({ 
            behavior: 'smooth' 
          });
        }
      });
    });
    
    // Intersection Observer for animations
    const animatedElements = document.querySelectorAll('.animate-in');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.style.opacity = '1';
          entry.target.style.transform = 'translateY(0)';
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '50px 0px'
    });
    
    animatedElements.forEach((element) => {
      observer.observe(element);
    });
  });
</script>
